From b1b14083b29c636a2c63acda01a7583b5b74e78c Mon Sep 17 00:00:00 2001
From: Dom Cobley <popcornmix@gmail.com>
Date: Mon, 26 Jul 2021 18:01:45 +0100
Subject: [PATCH 0858/2201] Revert "drm/vc4: Increase the core clock based on
 HVS load"

This reverts commit 5146eb7b0878d80009e2b27c47a668316683ef7e.
---
 drivers/gpu/drm/vc4/vc4_crtc.c |  15 -----
 drivers/gpu/drm/vc4/vc4_drv.h  |   3 -
 drivers/gpu/drm/vc4/vc4_kms.c  | 120 ++-------------------------------
 3 files changed, 6 insertions(+), 132 deletions(-)

diff --git a/drivers/gpu/drm/vc4/vc4_crtc.c b/drivers/gpu/drm/vc4/vc4_crtc.c
index 6bb52539a5a6..0771fd91aee7 100644
--- a/drivers/gpu/drm/vc4/vc4_crtc.c
+++ b/drivers/gpu/drm/vc4/vc4_crtc.c
@@ -660,27 +660,12 @@ static int vc4_crtc_atomic_check(struct drm_crtc *crtc,
 	struct vc4_crtc_state *vc4_state = to_vc4_crtc_state(crtc_state);
 	struct drm_connector *conn;
 	struct drm_connector_state *conn_state;
-	struct drm_encoder *encoder;
 	int ret, i;
 
 	ret = vc4_hvs_atomic_check(crtc, state);
 	if (ret)
 		return ret;
 
-	encoder = vc4_get_crtc_encoder(crtc, crtc_state);
-	if (encoder) {
-		const struct drm_display_mode *mode = &crtc_state->adjusted_mode;
-		struct vc4_encoder *vc4_encoder = to_vc4_encoder(encoder);
-
-		mode = &crtc_state->adjusted_mode;
-		if (vc4_encoder->type == VC4_ENCODER_TYPE_HDMI0) {
-			vc4_state->hvs_load = max(mode->clock * mode->hdisplay / mode->htotal + 1000,
-						  mode->clock * 9 / 10) * 1000;
-		} else {
-			vc4_state->hvs_load = mode->clock * 1000;
-		}
-	}
-
 	for_each_new_connector_in_state(state, conn, conn_state,
 					i) {
 		if (conn_state->crtc != crtc)
diff --git a/drivers/gpu/drm/vc4/vc4_drv.h b/drivers/gpu/drm/vc4/vc4_drv.h
index 7387244af483..9d7e0ee768e6 100644
--- a/drivers/gpu/drm/vc4/vc4_drv.h
+++ b/drivers/gpu/drm/vc4/vc4_drv.h
@@ -324,7 +324,6 @@ struct vc4_hvs {
 	u32 __iomem *dlist;
 
 	struct clk *core_clk;
-	struct clk_request *core_req;
 
 	/* Memory manager for CRTCs to allocate space in the display
 	 * list.  Units are dwords.
@@ -536,8 +535,6 @@ struct vc4_crtc_state {
 		unsigned int bottom;
 	} margins;
 
-	unsigned long hvs_load;
-
 	/* Transitional state below, only valid during atomic commits */
 	bool update_muxing;
 };
diff --git a/drivers/gpu/drm/vc4/vc4_kms.c b/drivers/gpu/drm/vc4/vc4_kms.c
index 0f7fad6b2393..45de906ba085 100644
--- a/drivers/gpu/drm/vc4/vc4_kms.c
+++ b/drivers/gpu/drm/vc4/vc4_kms.c
@@ -39,11 +39,9 @@ static struct vc4_ctm_state *to_vc4_ctm_state(struct drm_private_state *priv)
 
 struct vc4_hvs_state {
 	struct drm_private_state base;
-	unsigned long core_clock_rate;
 
 	struct {
 		unsigned in_use: 1;
-		unsigned long fifo_load;
 		struct drm_crtc_commit *pending_commit;
 	} fifo_state[HVS_NUM_CHANNELS];
 };
@@ -344,20 +342,11 @@ static void vc4_atomic_commit_tail(struct drm_atomic_state *state)
 	struct vc4_hvs *hvs = vc4->hvs;
 	struct drm_crtc_state *old_crtc_state;
 	struct drm_crtc_state *new_crtc_state;
-	struct vc4_hvs_state *new_hvs_state;
 	struct drm_crtc *crtc;
 	struct vc4_hvs_state *old_hvs_state;
 	struct clk_request *core_req;
 	int i;
 
-	old_hvs_state = vc4_hvs_get_old_global_state(state);
-	if (WARN_ON(!old_hvs_state))
-		return;
-
-	new_hvs_state = vc4_hvs_get_new_global_state(state);
-	if (WARN_ON(!new_hvs_state))
-		return;
-
 	for_each_new_crtc_in_state(state, crtc, new_crtc_state, i) {
 		struct vc4_crtc_state *vc4_crtc_state;
 
@@ -368,19 +357,12 @@ static void vc4_atomic_commit_tail(struct drm_atomic_state *state)
 		vc4_hvs_mask_underrun(dev, vc4_crtc_state->assigned_channel);
 	}
 
-	if (vc4->hvs && vc4->hvs->hvs5) {
-		/*
-		 * Do a temporary request on the core clock during the
-		 * modeset.
-		 */
+	if (vc4->hvs && vc4->hvs->hvs5)
 		core_req = clk_request_start(hvs->core_clk, 500000000);
 
-		/*
-		 * And remove the previous one based on the HVS
-		 * requirements if any.
-		 */
-		clk_request_done(hvs->core_req);
-	}
+	old_hvs_state = vc4_hvs_get_old_global_state(state);
+	if (!old_hvs_state)
+		return;
 
 	for_each_old_crtc_in_state(state, crtc, old_crtc_state, i) {
 		struct vc4_crtc_state *vc4_crtc_state =
@@ -431,20 +413,8 @@ static void vc4_atomic_commit_tail(struct drm_atomic_state *state)
 
 	drm_atomic_helper_cleanup_planes(dev, state);
 
-	if (vc4->hvs && vc4->hvs->hvs5) {
-		drm_dbg(dev, "Running the core clock at %lu Hz\n",
-			new_hvs_state->core_clock_rate);
-
-		/*
-		 * Request a clock rate based on the current HVS
-		 * requirements.
-		 */
-		hvs->core_req = clk_request_start(hvs->core_clk,
-						  new_hvs_state->core_clock_rate);
-
-		/* And drop the temporary request */
+	if (vc4->hvs && vc4->hvs->hvs5)
 		clk_request_done(core_req);
-	}
 }
 
 static int vc4_atomic_commit_setup(struct drm_atomic_state *state)
@@ -713,7 +683,6 @@ vc4_hvs_channels_duplicate_state(struct drm_private_obj *obj)
 
 	for (i = 0; i < HVS_NUM_CHANNELS; i++) {
 		state->fifo_state[i].in_use = old_state->fifo_state[i].in_use;
-		state->fifo_state[i].fifo_load = old_state->fifo_state[i].fifo_load;
 
 		if (!old_state->fifo_state[i].pending_commit)
 			continue;
@@ -722,9 +691,6 @@ vc4_hvs_channels_duplicate_state(struct drm_private_obj *obj)
 			drm_crtc_commit_get(old_state->fifo_state[i].pending_commit);
 	}
 
-	state->core_clock_rate = old_state->core_clock_rate;
-
-
 	return &state->base;
 }
 
@@ -883,76 +849,6 @@ static int vc4_pv_muxing_atomic_check(struct drm_device *dev,
 	return 0;
 }
 
-static int
-vc4_core_clock_atomic_check(struct drm_atomic_state *state)
-{
-	struct vc4_dev *vc4 = to_vc4_dev(state->dev);
-	struct drm_private_state *priv_state;
-	struct vc4_hvs_state *hvs_new_state;
-	struct vc4_load_tracker_state *load_state;
-	struct drm_crtc_state *old_crtc_state, *new_crtc_state;
-	struct drm_crtc *crtc;
-	unsigned int num_outputs;
-	unsigned long pixel_rate;
-	unsigned long cob_rate;
-	unsigned int i;
-
-	priv_state = drm_atomic_get_private_obj_state(state,
-						      &vc4->load_tracker);
-	if (IS_ERR(priv_state))
-		return PTR_ERR(priv_state);
-
-	load_state = to_vc4_load_tracker_state(priv_state);
-
-	hvs_new_state = vc4_hvs_get_global_state(state);
-	if (!hvs_new_state)
-		return -EINVAL;
-
-	for_each_oldnew_crtc_in_state(state, crtc,
-				      old_crtc_state,
-				      new_crtc_state,
-				      i) {
-		if (old_crtc_state->active) {
-			struct vc4_crtc_state *old_vc4_state =
-				to_vc4_crtc_state(old_crtc_state);
-			unsigned int channel = old_vc4_state->assigned_channel;
-
-			hvs_new_state->fifo_state[channel].fifo_load = 0;
-		}
-
-		if (new_crtc_state->active) {
-			struct vc4_crtc_state *new_vc4_state =
-				to_vc4_crtc_state(new_crtc_state);
-			unsigned int channel = new_vc4_state->assigned_channel;
-
-			hvs_new_state->fifo_state[channel].fifo_load =
-				new_vc4_state->hvs_load;
-		}
-	}
-
-	cob_rate = 0;
-	num_outputs = 0;
-	for (i = 0; i < HVS_NUM_CHANNELS; i++) {
-		if (!hvs_new_state->fifo_state[i].in_use)
-			continue;
-
-		num_outputs++;
-		cob_rate += hvs_new_state->fifo_state[i].fifo_load;
-	}
-
-	pixel_rate = load_state->hvs_load;
-	if (num_outputs > 1) {
-		pixel_rate = (pixel_rate * 40) / 100;
-	} else {
-		pixel_rate = (pixel_rate * 60) / 100;
-	}
-
-	hvs_new_state->core_clock_rate = max(cob_rate, pixel_rate);
-
-	return 0;
-}
-
-
 static int
 vc4_atomic_check(struct drm_device *dev, struct drm_atomic_state *state)
 {
@@ -970,11 +866,7 @@ vc4_atomic_check(struct drm_device *dev, struct drm_atomic_state *state)
 	if (ret)
 		return ret;
 
-	ret = vc4_load_tracker_atomic_check(state);
-	if (ret)
-		return ret;
-
-	return vc4_core_clock_atomic_check(state);
+	return vc4_load_tracker_atomic_check(state);
 }
 
 static struct drm_mode_config_helper_funcs vc4_mode_config_helpers = {
-- 
2.17.1

