From cbf1a95122f2e42ef0e11e785c63f2c43b43d58c Mon Sep 17 00:00:00 2001
From: Maxime Ripard <maxime@cerno.tech>
Date: Wed, 5 May 2021 14:06:21 +0200
Subject: [PATCH 0695/2201] Revert "drm/vc4: Rework the encoder retrieval code"

This reverts commit 3cf3d39b754a78c67134da7b8109eb968129ef8d.

This commit was making the assumption that we had a 1:1 mapping between
the encoders and their CRTC. While this is true for the HDMI controllers
on the BCM2711, this isn't true for the other encoders (DSI0 and DPI
share the PixelValve 0, and DSI1 and SMI share the PixelValve1), and
this isn't true at all on the older SoCs, effectively breaking the
encoder retrieval logic.

Signed-off-by: Maxime Ripard <maxime@cerno.tech>
---
 drivers/gpu/drm/vc4/vc4_crtc.c | 25 ++---------------------
 drivers/gpu/drm/vc4/vc4_drv.c  | 36 ----------------------------------
 drivers/gpu/drm/vc4/vc4_drv.h  | 10 ----------
 3 files changed, 2 insertions(+), 69 deletions(-)

diff --git a/drivers/gpu/drm/vc4/vc4_crtc.c b/drivers/gpu/drm/vc4/vc4_crtc.c
index d6a932246240..1d1ae0d9e48f 100644
--- a/drivers/gpu/drm/vc4/vc4_crtc.c
+++ b/drivers/gpu/drm/vc4/vc4_crtc.c
@@ -272,19 +272,6 @@ static u32 vc4_crtc_get_fifo_full_level_bits(struct vc4_crtc *vc4_crtc,
 				   PV_CONTROL_FIFO_LEVEL);
 }
 
-static struct drm_encoder *vc4_get_connector_encoder(struct drm_connector *connector)
-{
-	struct drm_encoder *encoder;
-
-	if (drm_WARN_ON(connector->dev, hweight32(connector->possible_encoders) != 1))
-		return NULL;
-
-	drm_connector_for_each_possible_encoder(connector, encoder)
-		return encoder;
-
-	return NULL;
-}
-
 /*
  * Returns the encoder attached to the CRTC.
  *
@@ -299,17 +286,9 @@ static struct drm_encoder *vc4_get_crtc_encoder(struct drm_crtc *crtc)
 
 	drm_connector_list_iter_begin(crtc->dev, &conn_iter);
 	drm_for_each_connector_iter(connector, &conn_iter) {
-		struct drm_encoder *encoder;
-		struct vc4_encoder *vc4_encoder;
-
-		encoder = vc4_get_connector_encoder(connector);
-		if (!encoder)
-			continue;
-
-		vc4_encoder = to_vc4_encoder(encoder);
-		if (vc4_encoder->crtc == crtc) {
+		if (connector->state->crtc == crtc) {
 			drm_connector_list_iter_end(&conn_iter);
-			return encoder;
+			return connector->encoder;
 		}
 	}
 	drm_connector_list_iter_end(&conn_iter);
diff --git a/drivers/gpu/drm/vc4/vc4_drv.c b/drivers/gpu/drm/vc4/vc4_drv.c
index c404ef49f420..3683780b9de8 100644
--- a/drivers/gpu/drm/vc4/vc4_drv.c
+++ b/drivers/gpu/drm/vc4/vc4_drv.c
@@ -226,41 +226,6 @@ static int compare_dev(struct device *dev, void *data)
 	return dev == data;
 }
 
-static struct drm_crtc *vc4_drv_find_crtc(struct drm_device *drm,
-					  struct drm_encoder *encoder)
-{
-	struct drm_crtc *crtc;
-
-	if (WARN_ON(hweight32(encoder->possible_crtcs) != 1))
-		return NULL;
-
-	drm_for_each_crtc(crtc, drm) {
-		if (!drm_encoder_crtc_ok(encoder, crtc))
-			continue;
-
-		return crtc;
-	}
-
-	return NULL;
-}
-
-static void vc4_drv_set_encoder_data(struct drm_device *drm)
-{
-	struct drm_encoder *encoder;
-
-	drm_for_each_encoder(encoder, drm) {
-		struct vc4_encoder *vc4_encoder;
-		struct drm_crtc *crtc;
-
-		crtc = vc4_drv_find_crtc(drm, encoder);
-		if (WARN_ON(!crtc))
-			return;
-
-		vc4_encoder = to_vc4_encoder(encoder);
-		vc4_encoder->crtc = crtc;
-	}
-}
-
 static void vc4_match_add_drivers(struct device *dev,
 				  struct component_match **match,
 				  struct platform_driver *const *drivers,
@@ -343,7 +308,6 @@ static int vc4_drm_bind(struct device *dev)
 	ret = component_bind_all(dev, drm);
 	if (ret)
 		return ret;
-	vc4_drv_set_encoder_data(drm);
 
 	if (!vc4->firmware_kms) {
 		ret = vc4_plane_create_additional_planes(drm);
diff --git a/drivers/gpu/drm/vc4/vc4_drv.h b/drivers/gpu/drm/vc4/vc4_drv.h
index ff4e71f79e49..7a70838595b2 100644
--- a/drivers/gpu/drm/vc4/vc4_drv.h
+++ b/drivers/gpu/drm/vc4/vc4_drv.h
@@ -445,16 +445,6 @@ enum vc4_encoder_type {
 
 struct vc4_encoder {
 	struct drm_encoder base;
-
-	/*
-	 * At boot time, we need to be able to retrieve the CRTC for a given
-	 * connector in order to run the disable hooks below to avoid the stuck
-	 * pixel issue. Unfortunately the drm_connector->encoder pointer is
-	 * NULL at that time so we can't move up the chain, so we'll store it
-	 * ourselves here.
-	 */
-	struct drm_crtc *crtc;
-
 	enum vc4_encoder_type type;
 	u32 clock_select;
 
-- 
2.17.1

