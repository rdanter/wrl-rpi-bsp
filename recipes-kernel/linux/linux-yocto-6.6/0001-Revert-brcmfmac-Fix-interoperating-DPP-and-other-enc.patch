From 076897d9256a7596d41f391021b1265e41702093 Mon Sep 17 00:00:00 2001
From: Richard Danter <radanter@gmail.com>
Date: Mon, 4 Nov 2024 10:27:08 +0000
Subject: [PATCH] Revert "brcmfmac: Fix interoperating DPP and other encryption
 network access"

This reverts commit 9604f03db0ef2cba15335284cd117516aff5b25d.
---
 .../broadcom/brcm80211/brcmfmac/cfg80211.c    | 67 +++++++++----------
 .../broadcom/brcm80211/brcmfmac/p2p.c         |  5 --
 2 files changed, 30 insertions(+), 42 deletions(-)

diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
index 1911741360c6..4bb77194c1c9 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/cfg80211.c
@@ -2469,50 +2469,43 @@ brcmf_cfg80211_connect(struct wiphy *wiphy, struct net_device *ndev,
 		goto done;
 	}
 
-	if (brcmf_feat_is_enabled(ifp, BRCMF_FEAT_FWSUP)) {
-		if (sme->crypto.psk) {
-			if (profile->use_fwsup != BRCMF_PROFILE_FWSUP_SAE) {
-				if (WARN_ON(profile->use_fwsup !=
-					BRCMF_PROFILE_FWSUP_NONE)) {
-					err = -EINVAL;
-					goto done;
-				}
-				brcmf_dbg(INFO, "using PSK offload\n");
-				profile->use_fwsup = BRCMF_PROFILE_FWSUP_PSK;
-			}
-		} else {
-			profile->use_fwsup = BRCMF_PROFILE_FWSUP_NONE;
+	if (sme->crypto.psk &&
+	    profile->use_fwsup != BRCMF_PROFILE_FWSUP_SAE) {
+		if (WARN_ON(profile->use_fwsup != BRCMF_PROFILE_FWSUP_NONE)) {
+			err = -EINVAL;
+			goto done;
 		}
+		brcmf_dbg(INFO, "using PSK offload\n");
+		profile->use_fwsup = BRCMF_PROFILE_FWSUP_PSK;
+	}
 
-		if (profile->use_fwsup != BRCMF_PROFILE_FWSUP_NONE) {
-			/* enable firmware supplicant for this interface */
-			err = brcmf_fil_iovar_int_set(ifp, "sup_wpa", 1);
-			if (err < 0) {
-				bphy_err(drvr, "failed to enable fw supplicant\n");
-				goto done;
-			}
-		} else {
-			err = brcmf_fil_iovar_int_set(ifp, "sup_wpa", 0);
+	if (profile->use_fwsup != BRCMF_PROFILE_FWSUP_NONE) {
+		/* enable firmware supplicant for this interface */
+		err = brcmf_fil_iovar_int_set(ifp, "sup_wpa", 1);
+		if (err < 0) {
+			bphy_err(drvr, "failed to enable fw supplicant\n");
+			goto done;
 		}
+	}
 
-		if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_PSK)
+	if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_PSK)
+		err = brcmf_set_pmk(ifp, sme->crypto.psk,
+				    BRCMF_WSEC_MAX_PSK_LEN);
+	else if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_SAE) {
+		/* clean up user-space RSNE */
+		err = brcmf_fil_iovar_data_set(ifp, "wpaie", NULL, 0);
+		if (err) {
+			bphy_err(drvr, "failed to clean up user-space RSNE\n");
+			goto done;
+		}
+		err = brcmf_fwvid_set_sae_password(ifp, &sme->crypto);
+		if (!err && sme->crypto.psk)
 			err = brcmf_set_pmk(ifp, sme->crypto.psk,
 					    BRCMF_WSEC_MAX_PSK_LEN);
-		else if (profile->use_fwsup == BRCMF_PROFILE_FWSUP_SAE) {
-			/* clean up user-space RSNE */
-			if (brcmf_fil_iovar_data_set(ifp, "wpaie", NULL, 0)) {
-				bphy_err(drvr, "failed to clean up user-space RSNE\n");
-				goto done;
-			}	
-			err = brcmf_set_sae_password(ifp, sme->crypto.sae_pwd,
-						     sme->crypto.sae_pwd_len);
-			if (!err && sme->crypto.psk)
-				err = brcmf_set_pmk(ifp, sme->crypto.psk,
-						    BRCMF_WSEC_MAX_PSK_LEN);
-		}
-		if (err)
-			goto done;
 	}
+	if (err)
+		goto done;
+
 	/* Join with specific BSSID and cached SSID
 	 * If SSID is zero join based on BSSID only
 	 */
diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c
index 7376f9f37d07..d4492d02e4ea 100644
--- a/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c
+++ b/drivers/net/wireless/broadcom/brcm80211/brcmfmac/p2p.c
@@ -1281,10 +1281,6 @@ static s32 brcmf_p2p_abort_action_frame(struct brcmf_cfg80211_info *cfg)
 	brcmf_dbg(TRACE, "Enter\n");
 
 	vif = p2p->bss_idx[P2PAPI_BSSCFG_DEVICE].vif;
-
-	if (!vif)
-		vif = p2p->bss_idx[P2PAPI_BSSCFG_PRIMARY].vif;
-
 	err = brcmf_fil_bsscfg_data_set(vif->ifp, "actframe_abort", &int_val,
 					sizeof(s32));
 	if (err)
@@ -1830,7 +1826,6 @@ bool brcmf_p2p_send_action_frame(struct brcmf_cfg80211_info *cfg,
 	/* validate channel and p2p ies */
 	if (config_af_params.search_channel &&
 	    IS_P2P_SOCIAL_CHANNEL(le32_to_cpu(af_params->channel)) &&
-	    p2p->bss_idx[P2PAPI_BSSCFG_DEVICE].vif &&
 	    p2p->bss_idx[P2PAPI_BSSCFG_DEVICE].vif->saved_ie.probe_req_ie_len) {
 		afx_hdl = &p2p->afx_hdl;
 		afx_hdl->peer_listen_chan = le32_to_cpu(af_params->channel);
-- 
2.34.1

